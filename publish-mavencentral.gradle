apply plugin: 'maven-publish'
apply plugin: 'signing'
apply from: rootProject.file('publishing.gradle')

if (project.hasProperty("android")) { // Android libraries

    tasks.register('sourcesJar', Jar) {
        archiveClassifier.convention('sources')
        archiveClassifier.set('sources')
        from android.sourceSets.main.java.srcDirs
    }

    tasks.register('javadoc', Javadoc) {
        failOnError = true
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
} else { // Java libraries
    tasks.register('sourcesJar', Jar) {
        dependsOn classes
        archiveClassifier.convention('sources')
        archiveClassifier.set('sources')
        from sourceSets.main.allSource
    }
}

tasks.register('javadocJar', Jar) {
    if (project.hasProperty("android")) {
        dependsOn "javadoc"
        from javadoc.destinationDir
    }
    archiveClassifier.convention('javadoc')
    archiveClassifier.set('javadoc')
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

group = project.getPublishProperty('groupId')
version = project.getPublishProperty('versionName')

ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.secretKeyRingFile"] = ''


File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
} else {
    ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
    ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
    ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {

                groupId = getPublishProperty('groupId')
                version = getPublishProperty('versionName')
                if (project.plugins.findPlugin("com.android.library")) {
                    javadoc.classpath += files(android.libraryVariants.collect { variant ->
                        variant.javaCompile.classpath.files
                    })
                    from components.release
                } else {
                    from components.java
                }

                artifact sourcesJar
                artifact javadocJar

                pom {
                    name = getPublishProperty('libraryName')
                    description = getPublishProperty('description')
                    url = getPublishProperty('siteUrl')
                    license {
                        name = getPublishProperty('licenseName')
                        url = getPublishProperty('licenseUrl')
                    }
                    developer {
                        name = getPublishProperty('developerName')
                        email = getPublishProperty('developerEmail')
                        organization = getPublishProperty('developerName')
                        organizationUrl = getPublishProperty('developerUrl')
                    }
                    scm {
                        connection = getPublishProperty('scmUrl')
                        developerConnection = getPublishProperty('scmUrl')
                        url = getPublishProperty('siteUrl')
                    }
                }
            }
        }
    }
}

signing {
    sign publishing.publications
}
